# -*- coding: utf-8 -*-
"""Trabalho TT002A.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_gJ8RcoEoP3JKml_Spolly34U7lrt2eA
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.metrics import mean_absolute_error

"""Parte 1: Análise Exploratória"""

df = pd.read_csv('/content/sample_data/Train.csv')

df

df.info()

df.describe()

df.isna().sum()

plt.hist(df['BMI'])
plt.show()

status = df['Mental Health Status'].value_counts().keys().tolist()
proporcoes = df['Mental Health Status'].value_counts().values.tolist()
plt.pie(proporcoes, labels = status)
plt.show()

patterns = df['Sleep Patterns'].value_counts().keys().tolist()
proporcoes = df['Sleep Patterns'].value_counts().values.tolist()
plt.pie(proporcoes, labels = patterns)
plt.show()

plt.hist(df['Stress Levels'])
plt.show()

"""Parte 2: Pré processamento dos dados"""

df[['Systolic_BP', 'Diastolic_BP']] = df['Blood Pressure (s/d)'].str.split('/', expand=True).astype(float)

gender_map = {'Male': 0, 'Female': 1}
df['Gender'] = df['Gender'].map(gender_map)

categorical_columns = ['Physical Activity Level', 'Smoking Status', 'Alcohol Consumption',
                       'Diet', 'Chronic Diseases', 'Medication Use', 'Family History',
                       'Mental Health Status', 'Sleep Patterns', 'Education Level', 'Income Level']

df[categorical_columns] = df[categorical_columns].fillna('Unknown')

df_encoded = pd.get_dummies(df, columns=categorical_columns)

df_encoded.drop(columns=['Blood Pressure (s/d)'], inplace=True)

df_encoded.head()

df_encoded.info()

correlation = df_encoded.corr()
correlation

threshold = 0.5

age_corr = correlation['Age (years)']
strong_age_corr = age_corr[abs(age_corr) > threshold]

plt.figure(figsize=(10, 8))
sns.heatmap(strong_age_corr.to_frame(), annot=True, fmt='.2f', cmap='coolwarm', cbar_kws={'shrink': .8})
plt.title('Correlações Significativas com Idade')
plt.show()

df_encoded.corr()['Age (years)'].sort_values(ascending=False)

"""Parte 3: Treinamento e avaliação dos modelos"""

X = df_encoded.drop(columns=['Age (years)'])
y = df_encoded['Age (years)']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""Modelo 1: Regressão Linear"""

linear_model = LinearRegression()
linear_model.fit(X_train, y_train)

y_pred_lr = linear_model.predict(X_test)

mse_lr = mean_squared_error(y_test, y_pred_lr)
r2_lr = r2_score(y_test, y_pred_lr)

print(f'Regressão Linear - MSE: {mse_lr:.2f}, R2: {r2_lr:.2f}')

import matplotlib.pyplot as plt

plt.figure(figsize=(8, 6))
plt.scatter(y_test, y_pred_lr, alpha=0.5)
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--')
plt.xlabel('Idade Real (anos)')
plt.ylabel('Idade Prevista (anos)')
plt.title('Gráfico de Dispersão: Idade Real vs. Idade Prevista (Regressão Linear)')

plt.show()

plt.subplot(1, 3, 1)
plt.scatter(y_test, y_test - y_pred_lr, alpha=0.5)
plt.axhline(y=0, color='r', linestyle='--')
plt.title('Resíduos: Regressão Linear')
plt.xlabel('Idade Real')
plt.ylabel('Resíduos')

"""Modelo 2: Regressão de Árvore de decisão"""

tree_model = DecisionTreeRegressor(max_depth=5, random_state=42)
tree_model.fit(X_train, y_train)

y_pred_tree = tree_model.predict(X_test)

mse_tree = mean_squared_error(y_test, y_pred_tree)
r2_tree = r2_score(y_test, y_pred_tree)

print(f'Árvore de Decisão - MSE: {mse_tree:.2f}, R2: {r2_tree:.2f}')

plt.figure(figsize=(8, 6))
plt.scatter(y_test, y_pred_tree, alpha=0.5)
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--')
plt.xlabel('Idade Real (anos)')
plt.ylabel('Idade Prevista (anos)')
plt.title('Gráfico de Dispersão: Idade Real vs. Idade Prevista (Árvore de Decisão)')
plt.show()

plt.subplot(1, 3, 2)
plt.scatter(y_test, y_test - y_pred_tree, alpha=0.5)
plt.axhline(y=0, color='r', linestyle='--')
plt.title('Resíduos: Árvore de Decisão')
plt.xlabel('Idade Real')

"""Modelo 3: Gradient Boosting"""

gb_model = GradientBoostingRegressor(n_estimators=100, random_state=42)
gb_model.fit(X_train, y_train)

y_pred_gb = gb_model.predict(X_test)

mse_gb = mean_squared_error(y_test, y_pred_gb)
r2_gb = r2_score(y_test, y_pred_gb)

print(f'Gradient Boosting - MSE: {mse_gb:.2f}, R2: {r2_gb:.2f}')

plt.figure(figsize=(8, 6))
plt.scatter(y_test, y_pred_gb, alpha=0.5)  # Dados reais vs. previsões
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--')  # Linha de referência
plt.xlabel('Idade Real (anos)')
plt.ylabel('Idade Prevista (anos)')
plt.title('Gráfico de Dispersão: Idade Real vs. Idade Prevista (Gradient Boosting)')
plt.show()

plt.subplot(1, 3, 3)
plt.scatter(y_test, y_test - y_pred_gb, alpha=0.5)
plt.axhline(y=0, color='r', linestyle='--')
plt.title('Resíduos: Gradient Boosting')
plt.xlabel('Idade Real')

"""Parte 4: Comparação entre os modelos"""

results = pd.DataFrame({
    'Idade Real': y_test,
    'Regressão Linear': y_pred_lr,
    'Árvore de Decisão': y_pred_tree,
    'Gradient Boosting': y_pred_gb
})

sns.boxplot(data=results, orient='h')
plt.title('Comparação das Previsões')
plt.xlabel('Idade')
plt.show()

mae_lr = mean_absolute_error(y_test, y_pred_lr)
mae_tree = mean_absolute_error(y_test, y_pred_tree)
mae_gb = mean_absolute_error(y_test, y_pred_gb)

rmse_lr = np.sqrt(mse_lr)
rmse_tree = np.sqrt(mse_tree)
rmse_gb = np.sqrt(mse_gb)

metrics = pd.DataFrame({
    'Modelo': ['Regressão Linear', 'Árvore de Decisão', 'Gradient Boosting'],
    'MSE': [mse_lr, mse_tree, mse_gb],
    'RMSE': [rmse_lr, rmse_tree, rmse_gb],
    'MAE': [mae_lr, mae_tree, mae_gb],
    'R²': [r2_lr, r2_tree, r2_gb]
})

print(metrics)